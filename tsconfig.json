{
  "compilerOptions": {
    "allowJs": true,
    "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */
    "checkJs": false,
    "declaration": true,
    "declarationMap": true,
    "downlevelIteration": true,
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    "forceConsistentCasingInFileNames": true,/* Disallow inconsistently-cased references to the same file. */
    "isolatedModules": true,
    "jsx": "react",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "module": "esnext",
    "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    "noEmit": false,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    "noUnusedLocals": true,                /* Report errors on unused locals. */
    "outDir": "./dist/",
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,                           /* Enable all strict type-checking options. */
    "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    "strictNullChecks": true,              /* Enable strict null checks. */
    "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    "target": "es5",
    /* Additional Checks */
    /* Advanced Options */
    /* Experimental Options */
    /* Module Resolution Options */
    /* Source Map Options */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
  },
  "include": [
    "src",
    "server.js"
  ]
}